---
hostname: "br-gateway1"
ansible_host: "192.168.2.50"
ansible_ssh_private_key_file: "~/.ssh/br-gateway1"
ip: "172.22.10.1"
mac: "e4:5f:01:65:14:70"

my_os_arch_arm_centric: arm64

#################################
# ipr-cnrs/nftables
#################################
nft_old_pkg_list: []

nft_global_default_rules: {}
nft_global_rules:
  005 state management:
    - ct state established,related accept
    - ct state invalid drop

nft_input_default_rules: {}
nft_input_rules:
  000 policy:
    - type filter hook input priority 0; policy drop;
  001 global:
    - jump global
  002 localhost:
    - iif lo accept
  014 icmp:
    - meta l4proto {icmp,icmpv6} accept
  210 input tcp accepted:
    - tcp dport @in_tcp_accept ct state new accept
  211 input udp accepted:
    - udp dport @in_udp_accept ct state new accept

nft_output_default_rules: {}
nft_output_rules:
  000 policy:
    - type filter hook output priority 0;

nft__forward_table_manage: true
nft_forward_default_rules: {}
nft_forward_rules:
  000 policy:
    - type filter hook forward priority 0; policy drop;
  001 global:
    - jump global
  200 lan to wan tcp:
    - iifname $lan_interface ip saddr $lan_network oifname $wan_interface tcp dport @forward_tcp_accept ct state new accept
  210 lan to wan udp:
    - iifname $lan_interface ip saddr $lan_network oifname $wan_interface udp dport @forward_udp_accept ct state new accept
  220 ssh from wan:
    - iifname $wan_interface oifname $lan_interface ip daddr $lan_network tcp dport ssh ct state new accept
  230 http from wan:
    - iifname $wan_interface oifname $lan_interface ip daddr $lan_network tcp dport {http, https} ct state new accept
  240 docker:
    - ct state { established, related } accept;
    - ct state invalid drop;
    - iifname $docker_interface accept;


nft__nat_table_manage: true
nft__nat_default_prerouting_rules: {}
nft__nat_prerouting_rules:
  000 policy:
    - type nat hook prerouting priority 0;

nft__nat_default_postrouting_rules: {}
nft__nat_postrouting_rules:
  000 policy:
    - type nat hook postrouting priority 100;
  005 masquerade lan to wan:
    - ip saddr $lan_network oifname $wan_interface masquerade
    - oifname != $docker_interface masquerade;

nft_define_default: {}
nft_define:
  broadcast and multicast:
    name: badcast_addr
    value: "{ 255.255.255.255, 224.0.0.1, 224.0.0.251 }"
  ip6 broadcast and multicast:
    name: ip6_badcast_addr
    value: "{ ff02::16 }"
  input tcp accepted:
    name: in_tcp_accept
    value: "{ ssh, https, http, iscsi-target, 2379, 6443 }"
  input udp accepted:
    name: in_udp_accept
    value: "{ snmp, domain, ntp, bootps }"
  output tcp accepted:
    name: out_tcp_accept
    value: "{ http, https, ssh }"
  output udp accepted:
    name: out_udp_accept
    value: "{ domain, bootps , ntp }"
  lan interface:
    name: lan_interface
    value: "eth0"
  wan interface:
    name: wan_interface
    value: "wlan0"
  docker interface:
    name: docker_interface
    value: "{ docker0 }"
  lan network:
    name: lan_network
    value: "172.22.10.0/24"
  forward tcp accept:
    name: forward_tcp_accept
    value: "{ http, https, ssh }"
  forward udp accept:
    name: forward_udp_accept
    value: "{ domain, ntp }"

# sets and maps
nft_set_default: {}
nft_set:
  blackhole:
    - type ipv4_addr;
    - elements = $badcast_addr
  ip6blackhole:
    - type ipv6_addr;
    - elements = $ip6_badcast_addr
  in_tcp_accept:
    - type inet_service; flags interval;
    - elements = $in_tcp_accept
  in_udp_accept:
    - type inet_service; flags interval;
    - elements = $in_udp_accept
  out_tcp_accept:
    - type inet_service; flags interval;
    - elements = $out_tcp_accept
  out_udp_accept:
    - type inet_service; flags interval;
    - elements = $out_udp_accept
  forward_tcp_accept:
    - type inet_service; flags interval;
    - elements = $forward_tcp_accept
  forward_udp_accept:
    - type inet_service; flags interval;
    - elements = $forward_udp_accept
